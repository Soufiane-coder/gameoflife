  <div className="filter-and-adding-button">
                <div className="filter">
                    <input type="radio" name="filter" id="all" value="all"
                        checked={selectedFilterOption === "all"}
                        onChange={handleRadioChange} />
                    <label className="filter-item all" htmlFor="all">All routine <span className="tag">{optionsTags.all}</span></label>

                    <input type="radio" name="filter" id="_important" value="important"
                        checked={selectedFilterOption === "important"}
                        onChange={handleRadioChange} />
                    <label className="filter-item important" htmlFor="_important">Important <span className="tag">{optionsTags.important}</span></label>

                    <input type="radio" name="filter" id="waiting" value="waiting"
                        checked={selectedFilterOption === "waiting"}
                        onChange={handleRadioChange} />
                    <label className="filter-item waiting" htmlFor="waiting"> Waiting <span className="tag">{optionsTags.waiting}</span></label>

                    <input type="radio" name="filter" id="completed" value="completed"
                        checked={selectedFilterOption === "completed"}
                        onChange={handleRadioChange} />
                    <label className="filter-item completed" htmlFor="completed"> Completed <span className="tag">{optionsTags.completed}</span></label>
                    <span className="selector"></span>
                </div>
                <Filter />
                {/* we put false so editThisRoutine will be false */}
    
            </div>

              useEffect(() => {
    Object.keys(optionsTags).forEach((tagName) => {
      let tagValue = "all";
      switch (tagName) {
        case "all":
          tagValue = Object.keys(routines || {}).length;
          break;
        case "important":
          tagValue = routines?.reduce(
            (accum, routine) =>
              routine.priority === "important" ? ++accum : accum,
            0
          );
          break;
        case "waiting":
          tagValue = routines?.reduce(
            (accum, routine) => (routine.submitted === "0" ? ++accum : accum),
            0
          );
          break;
        case "completed":
          tagValue = routines?.reduce(
            (accum, routine) => (routine.submitted === "1" ? ++accum : accum),
            0
          );
          break;
        default:
          tagValue = Object.keys(routines || {}).length;
      }
      setOptionsTags((oldTags) => ({ ...oldTags, [tagName]: tagValue }));
    });
  }, [routines]);
